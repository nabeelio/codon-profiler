{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Codon-profiler","tagline":"A PHP 5.4+ Benchmarking class","body":"# Codon/Profiler\r\n\r\nA PHP 5.4+ profiling class, loosely based on the PEAR Benchmark package.\r\n\r\n* **Author:** Nabeel Shahzad <nshahzad@gmail.com>\r\n* **Homepage:** https://github.com/nshahzad/codon-profiler\r\n* **Packagist:** http://packagist.org/packages/codon/profiler\r\n* **License:** MIT\r\n* **Version:** 1.0\r\n\r\nCurrent to-do list:\r\n\r\n* Console colors to show the fastest test runs\r\n* Show percentage differences between runs\r\n* Use the Vulcan Logic Dumper (http://derickrethans.nl/projects.html#vld) to allow you to see opcode differences\r\n\r\n# Installation\r\n\r\nAdd to your composer.json file:\r\n\r\n```\r\n\"require\": {\r\n    \"codon/profiler\": \"*\"\r\n}\r\n```\r\n\r\nThen run the composer update\r\n\r\n```bash\r\n./composer.phar update\r\n```\r\n\r\n# Basic Usage\r\n\r\nThis class extensively uses closures, and all of the methods (except for getResults) are chainable.\r\nDeclare a new Profiler class:\r\n\r\n```php\r\n<?php\r\n$data = [/* ... */];\r\n$profiler = new \\Codon\\Profiler();\r\n$profiler->set('showOutput', false)\r\n    ->add([\r\n        'name' => 'Count in loop', 'iterations' => 100,\r\n        'function' => function() use ($data, &$profiler) {\r\n            // This is the code to benchmark:\r\n            for($i = 0; $i <= count($data); $i++) {\r\n                echo $data[$i] . \"\\n\";\r\n            }\r\n        }\r\n    ])->run()->showResults();\r\n```\r\n\r\nWhich will output something like:\r\n\r\n```\r\nTests started at: 2012-08-15T12:05:37-04:00\r\nTests run: 2, iterations: 200\r\nPHP Version: 5.4.5-1~dotdeb.0\r\n\r\nCount in loop               (Iterations: 100)\r\n---------\r\nTimers:\r\n              total:        0.000011045170\r\n```\r\n\r\n## Settings\r\n\r\nTo change profiler settings, use the ```set()``` function:\r\n\r\n```php\r\n<?php\r\n$profiler->set($name, $value);\r\n```\r\n\r\nSome settings (type and (default)):\r\n\r\n* **showOutput** - bool (false)- supress output from the test runs\r\n* **tareRuns** - bool (true) - There is some penalty for running a closure. This will average the time to run an empty closure, and subtract it from the average of all the runs (only from the total, not checkpoints or timers that are called within)\r\n* **formatMemoryUsage** - bool (true) - Show the memory usage in a digestable format\r\n\r\n\r\n## Using the Profiler\r\n\r\nThere are two ways you can use the profile:\r\n\r\n1. Add tests using ```add()```; (see test/benchmark.php)\r\n2. Profile code inline using the ```startTimer()/endTimer()```; (see test/inline.php)\r\n\r\n\r\n### Using add()\r\n\r\nTo add a test, you use the ```add()``` method, which accepts an array of:\r\n\r\n```php\r\n<?php\r\n\r\n$test = [\r\n    'name' => 'Benchmark name',\r\n    'iterations' => # of times to run\r\n    'function' => closure of the test to run\r\n];\r\n\r\n$profiler->add($test);\r\n```\r\n\r\nThis method can be chained\r\n\r\nTip: To use checkpoints/timers and other functionality within your test run, pass the Profiler object via ```use``` (as a reference). You can also pass any other data/variables needed for your tests via the ```use```\r\n\r\n```php\r\n<?php\r\n$test = [\r\n    'name' => 'Sample',\r\n    'iterations' => 100\r\n    'function' => function() use (&$profiler) {\r\n\r\n        $profiler->checkpoint('Started!');\r\n\r\n        // some code\r\n\r\n        $profiler->startTimer('Subsection');\r\n        // Subsection of code\r\n        $profiler->endTimer('Subsection');\r\n    }\r\n];\r\n\r\n$profiler->add($test);\r\n```\r\n\r\nTo run all of the tests, call ```run()```:\r\n\r\n```php\r\n<?php\r\n$profiler->run();\r\n```\r\n\r\nAnd to show the results:\r\n\r\n```php\r\n<?php\r\n$profiler->showResults([bool $html = false (wrap PRE with BR's)], [bool $return = false (ouput directly?)]]\r\n```\r\n\r\n### Using the profiler inline\r\n\r\nYou can call the ```startTimer()/endTimer()``` and ```markMemoryUsage()``` functions in any inline code\r\nExample:\r\n\r\n```php\r\n<?php\r\n$data = [];\r\nfor($i = 0; $i < 1000; $i++) {\r\n\t$data[] = $i;\r\n}\r\n\r\n# You can pass options to the constructor\r\n$profiler = new \\Codon\\Profiler([\r\n\t'showOutput' => false\r\n]);\r\n\r\n$profiler->markMemoryUsage('start');\r\n$profiler->startTimer('Count in loop');\r\n\r\nfor($i = 0; $i < count($data); $i++) {\r\n\techo $data[$i] . \"\\n\";\r\n}\r\n\r\n$profiler->endTimer('Count in loop');\r\n$profiler->markMemoryUsage('end');\r\n\r\n$profiler->showResults();\r\n```\r\n\r\nWhich shows:\r\n\r\n```\r\nTests started at: 2012-08-15T12:30:02-04:00\r\nTests run: 1, iterations: 0\r\nPHP Version: 5.4.5-1~dotdeb.0\r\n\r\n---------\r\nTimers:\r\n      Count in loop:        0.001808881760\r\n\r\n      Memory Usage:         script         peak        total\r\n              start:        435 KB       456 KB       512 KB\r\n                end:        438 KB       456 KB       512 KB\r\n```\r\n\r\n# Examples\r\n\r\n## Multiple Tests\r\n\r\n```php\r\n<?php\r\n# Generate some sample data\r\n$data = [];\r\nfor($i = 1; $i <= 1000; $i++) {\r\n\t$data[] = rand(1, $i * $i);\r\n}\r\n\r\n$profiler = new \\Codon\\Profiler();\r\n$profiler\r\n\t->set('showOutput', false)\r\n    ->add([\r\n        'name' => 'Count in loop',\r\n        'iterations' => 100,\r\n        'function' => function() use ($data, &profiler) {\r\n            // This is the code we are profiling\r\n            for($i = 0; $i < count($data); $i++) {\r\n                echo $data[$i] . \"\\n\";\r\n            }\r\n        }\r\n    ])\r\n    ->add([\r\n        'name' => 'Count out of loop',\r\n        'iterations' => 100,\r\n        'function' => function() use ($data, &profiler) {\r\n            // This is the code we are profiling\r\n\t\t\t$count = count($data);\r\n            for($i = 0; $i < $count; $i++) {\r\n                echo $data[$i] . \"\\n\";\r\n            }\r\n        }\r\n    ])\r\n\t->run()\r\n\t->showResults();\r\n```\r\n\r\nThis will output:\r\n\r\n```\r\nTests started at: 2012-08-15T12:05:37-04:00\r\nTests run: 2, iterations: 200\r\nPHP Version: 5.4.5-1~dotdeb.0\r\n\r\nCount in loop               (Iterations: 100)\r\n---------\r\nTimers:\r\n              total:        0.000011045170\r\n\r\n\r\n\r\nCount out of loop           (Iterations: 100)\r\n---------\r\nTimers:\r\n              total:        0.000004445744\r\n```\r\n\r\n## The same as above, but with timers:\r\n\r\n```php\r\n<?php\r\n$profiler\r\n\t->clearAll()\r\n    ->add([\r\n        'name' => 'Count in loop',\r\n        'iterations' => 100,\r\n        'function' => function() use ($data, &$profiler) {\r\n\r\n\t\t\t$profiler->startTimer('Inside loop');\r\n            for($i = 0; $i < count($data); $i++) {\r\n                echo $data[$i] . \"\\n\";\r\n            }\r\n\t\t\t$profiler->endTimer('Inside loop');\r\n\r\n\r\n\t\t\t$profiler->startTimer('Outside loop');\r\n\t\t\t$count = count($data);\r\n\t\t\tfor($i = 0; $i < $count; $i++) {\r\n\t\t\t\techo $data[$i] . \"\\n\";\r\n\t\t\t}\r\n\t\t\t$profiler->endTimer('Outside loop');\r\n        }\r\n    ])\r\n\t->run()\r\n\t->showResults();\r\n```\r\n\r\nShowing:\r\n\r\n```\r\nTests started at: 2012-08-15T12:40:28-04:00\r\nTests run: 1, iterations: 300\r\nPHP Version: 5.4.5-1~dotdeb.0\r\nCount in loop               (Iterations: 100)\r\n---------\r\nTimers:\r\n        Inside loop:        0.000016908646\r\n       Outside loop:        0.000004930496\r\n              total:        0.000022240901\r\n```\r\n\r\n## Using Timers and checkpoints\r\n\r\n```php\r\n<?php\r\n$profiler = new \\Codon\\Profiler();\r\n$profiler\r\n\t->set('showOutput', false)\r\n    ->add([\r\n        'name' => 'Count in loop',\r\n        'iterations' => 100,\r\n        'function' => function() use ($data, &$profiler) {\r\n\r\n            // This is the code we are profiling\r\n\r\n\t\t\t$profiler->markMemoryUsage('Start of loop');\r\n\t\t\t$profiler->startTimer('Loop only');\r\n            for($i = 0; $i < count($data); $i++) {\r\n\r\n\t\t\t\tif($i === 500) {\r\n\t\t\t\t\t$profiler->checkpoint('halfway');\r\n\t\t\t\t\t$profiler->markMemoryUsage('halfway');\r\n\t\t\t\t}\r\n\r\n                echo $data[$i] . \"\\n\";\r\n            }\r\n\t\t\t$profiler->endTimer('Loop only');\r\n        }\r\n    ])\r\n    ->add([\r\n        'name' => 'Count out of loop',\r\n        'iterations' => 100,\r\n        'function' => function() use ($data, &$profiler) {\r\n\r\n            // This is the code we are profiling\r\n\r\n\t\t\t$profiler->markMemoryUsage('Start of loop');\r\n\t\t\t$count = count($data);\r\n\r\n\t\t\t$profiler->startTimer('Loop only');\r\n            for($i = 0; $i < $count; $i++) {\r\n\r\n\t\t\t\tif($i === 500) {\r\n\t\t\t\t\t$profiler->checkpoint('halfway');\r\n\t\t\t\t\t$profiler->markMemoryUsage('halfway');\r\n\t\t\t\t}\r\n\r\n                echo $data[$i] . \"\\n\";\r\n            }\r\n\t\t\t$profiler->endTimer('Loop only');\r\n\r\n        }\r\n    ])\r\n\t->run()\r\n\t->showResults();\r\n```\r\n\r\nWhich will output:\r\n\r\n```\r\nTests started at: 2012-08-15T12:30:07-04:00\r\nTests run: 2, iterations: 200\r\nPHP Version: 5.4.5-1~dotdeb.0\r\nCount in loop               (Iterations: 100)\r\n---------\r\nTimers:\r\n          Loop only:        0.000015780926\r\n              total:        0.000016092539\r\n\r\nCheckpoints:\r\n            halfway:        0.000819134712\r\n\r\n      Memory Usage:         script         peak        total\r\n      Start of loop:        468 KB       491 KB       512 KB\r\n            halfway:        484 KB       491 KB       512 KB\r\n\r\n\r\n\r\nCount out of loop           (Iterations: 100)\r\n---------\r\nTimers:\r\n          Loop only:        0.000006530285\r\n              total:        0.000006922960\r\n\r\nCheckpoints:\r\n            halfway:        0.000361402035\r\n\r\n      Memory Usage:         script         peak        total\r\n      Start of loop:        472 KB       491 KB       512 KB\r\n            halfway:        488 KB       491 KB       512 KB\r\n```\r\n\r\n### Calling getResults\r\n\r\nAdditionally, calling ```getResults()``` will return an array of:\r\n\r\n```\r\nArray\r\n(\r\n    [<TEST_NAME>] => Array\r\n    (\r\n        [timers] => Array\r\n        (\r\n            [<TIMER_NAME>] => Array\r\n                (\r\n                    [start] => 1345047230.6797\r\n                    [end] => 1345047230.6813\r\n                    [total] => 1.6541504859924E-5\r\n                )\r\n\r\n            ...\r\n\r\n        )\r\n\r\n        [checkpoints] => Array\r\n        (\r\n            [<CHECKPOINTS] => 0.00094666719436646\r\n            ...\r\n        )\r\n\r\n        [memory] => Array\r\n        (\r\n            [<NAME>] => Array\r\n                (\r\n                    [total] => 669742.48\r\n                    [real] => 857210.88\r\n                )\r\n            ...\r\n\r\n        )\r\n\r\n        [iterations] => 100\r\n    )\r\n```\r\n\r\nExample:\r\n\r\n```\r\nArray\r\n(\r\n    [Count in loop] => Array\r\n    (\r\n        [timers] => Array\r\n        (\r\n            [Loop only] => Array\r\n                (\r\n                    [start] => 1345047400.6883\r\n                    [end] => 1345047400.6904\r\n                    [total] => 2.0921230316162E-5\r\n                )\r\n\r\n            [total] => Array\r\n                (\r\n                    [start] => 1345047400.6883\r\n                    [end] => 1345047400.6904\r\n                    [total] => 2.1232867240906E-5\r\n                )\r\n\r\n        )\r\n\r\n    [checkpoints] => Array\r\n        (\r\n            [halfway] => 0.00087648630142212\r\n        )\r\n\r\n    [memory] => Array\r\n        (\r\n            [Start of loop] => Array\r\n                (\r\n                    [total] => 669854.48\r\n                    [real] => 857210.88\r\n                )\r\n\r\n            [halfway] => Array\r\n                (\r\n                    [total] => 671882.48\r\n                    [real] => 862453.76\r\n                )\r\n\r\n        )\r\n\r\n        [iterations] => 100\r\n    )\r\n\r\n    [Count out of loop] => Array\r\n    (\r\n        [timers] => Array\r\n        (\r\n            [Loop only] => Array\r\n                (\r\n                    [start] => 1345047400.7563\r\n                    [end] => 1345047400.757\r\n                    [total] => 7.5697898864746E-6\r\n                )\r\n\r\n            [total] => Array\r\n                (\r\n                    [start] => 1345047400.7562\r\n                    [end] => 1345047400.757\r\n                    [total] => 7.8718900680542E-6\r\n                )\r\n\r\n        )\r\n\r\n    [checkpoints] => Array\r\n        (\r\n            [halfway] => 0.00033202171325684\r\n        )\r\n\r\n    [memory] => Array\r\n        (\r\n            [Start of loop] => Array\r\n                (\r\n                    [total] => 674298.08\r\n                    [real] => 857210.88\r\n                )\r\n\r\n            [halfway] => Array\r\n                (\r\n                    [total] => 676372.48\r\n                    [real] => 862453.76\r\n                )\r\n\r\n        )\r\n\r\n        [iterations] => 100\r\n    )\r\n)\r\n```","google":""}